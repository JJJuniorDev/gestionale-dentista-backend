package Services;

import java.util.List;
import java.util.Optional;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import Dto.AppuntamentoDTO;
import Model.Appuntamento;
import Model.Operazione;
import Repository.Appuntamento.AppuntamentoRepository;

@Service
public class AppuntamentoService {

	  private final KafkaTemplate<String, Object> kafkaTemplate;
	  
    @Autowired
    private AppuntamentoRepository appuntamentoRepository;


    
    
    @Autowired
    public AppuntamentoService(KafkaTemplate<String, Object> kafkaTemplate, AppuntamentoRepository appuntamentoRepository) {
        this.kafkaTemplate = kafkaTemplate;
        this.appuntamentoRepository= appuntamentoRepository;
    }
    
    public List<Appuntamento> getAppuntamentiByDentistaId(String dentistaId) {
        return appuntamentoRepository.findByDentistaId(dentistaId);
    }
    
    public List<Appuntamento> getAllAppuntamenti() {
    	System.out.println(appuntamentoRepository.count());
        return appuntamentoRepository.findAll();
    }

    public Optional<Appuntamento> getAppuntamento(String id) {
        
        //if (id != null && id.length() == 24 && ObjectId.isValid(id)) {
    	System.out.println("LUNGHEZZA ID CHE DEVE ESSERE 24==="+id.length());
            ObjectId objectId = new ObjectId(id);
            
            // Continua con la logica per recuperare l'appuntamento usando l'ID
      /*  } else {
            throw new IllegalArgumentException("Invalid ID format: ID must be a 24-character hex string.");
        }*/
        
        return appuntamentoRepository.findById(objectId);
    }

    public Appuntamento createAppuntamento(Appuntamento appuntamento) {
    	  Appuntamento savedAppuntamento = appuntamentoRepository.save(appuntamento);

          // Solo se l'appuntamento Ã¨ stato salvato correttamente, invia l'evento a Kafka
          kafkaTemplate.send("appuntamento-creato", savedAppuntamento);

          return savedAppuntamento;
    }

    public void deleteAppuntamento(String id) {
        ObjectId objectId = new ObjectId(id);
        appuntamentoRepository.deleteById(objectId);
    }

    public Appuntamento updateAppuntamento(String id, Appuntamento newAppuntamento) {
        ObjectId objectId = new ObjectId(id);
        return appuntamentoRepository.findById(objectId)
            .map(appuntamento -> {
            	   try {
                       if (newAppuntamento.getDataEOrario() != null) {
                           appuntamento.setDataEOrario(newAppuntamento.getDataEOrario());
                       }
                       if (newAppuntamento.getCodiceFiscalePaziente() != null) {
                           appuntamento.setCodiceFiscalePaziente(newAppuntamento.getCodiceFiscalePaziente());
                       }
                       if (newAppuntamento.getTrattamento() != null) {
                           appuntamento.setTrattamento(newAppuntamento.getTrattamento());
                       }
                       if (newAppuntamento.getNote() != null) {
                           appuntamento.setNote(newAppuntamento.getNote());
                       }
                       if (newAppuntamento.getOperazioni() != null) {
                           appuntamento.setOperazioni(newAppuntamento.getOperazioni());
                       }
                       return appuntamentoRepository.save(appuntamento);
                   } catch (Exception e) {
                       System.out.printf("Error during mapping: {}", e.getMessage());
                       throw e; // Re-throw the exception after logging
                   }
               })
            .orElseGet(() -> {
                newAppuntamento.setId(id);
                return appuntamentoRepository.save(newAppuntamento);
            });
    }
        public Appuntamento addOperazioneToAppuntamento(String appuntamentoId, Operazione operazione) {
            ObjectId objectId = new ObjectId(appuntamentoId);
            Optional<Appuntamento> optionalAppuntamento = appuntamentoRepository.findById(objectId);
            if (optionalAppuntamento.isPresent()) {
                Appuntamento appuntamento = optionalAppuntamento.get();
                // Converte l'id dell'operazione in ObjectId prima di aggiungerlo
                ObjectId operazioneId = new ObjectId(operazione.getId());
                appuntamento.getOperazioni().add(operazioneId);
                return appuntamentoRepository.save(appuntamento);
            } else {
                throw new RuntimeException("Appuntamento non trovato con ID: " + appuntamentoId);
            }
        }
            
            public AppuntamentoDTO convertToDTO(Appuntamento appuntamento, List<Operazione> operazioni) {
                AppuntamentoDTO dto = new AppuntamentoDTO();
                dto.setId(appuntamento.getId().toString());
                dto.setDataEOrario(appuntamento.getDataEOrario());
                dto.setCodiceFiscalePaziente(appuntamento.getCodiceFiscalePaziente());
                dto.setTrattamento(appuntamento.getTrattamento());
                dto.setNote(appuntamento.getNote());
                dto.setOperazioniIds(appuntamento.getOperazioni()); // Imposta gli ID delle operazioni
                dto.setOperazioni(operazioni); // Imposta le operazioni complete
                return dto;
            }
        }
    

