package Services;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import Model.UserM;
import Repository.Sicurezza.UserMRepository;
import jakarta.annotation.PostConstruct;

@Service
public class UserMServiceImpl implements UserDetailsService {

    private final UserMRepository userRepository;
   
    @Autowired
    public UserMServiceImpl(UserMRepository userRepository) {
        this.userRepository = userRepository;
   
    }

    public UserDetails loadUserByEmail(String email) throws UsernameNotFoundException {

    	System.out.println("Loading user by email: " + email);

    	   try {
    		   Optional <UserM> user = userRepository.findByEmail(email);
    		//   Optional <UserM> userUsername= userRepository.findByUsername(email);
			  if (user.isEmpty()) {
		            throw new UsernameNotFoundException("User not found with email: " + email);
		        }
			return user.get();
		}
    	   catch (IncorrectResultSizeDataAccessException e) {
               throw new UsernameNotFoundException("Multiple users found with email: " + email);
           }
    	   catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;

    }
    
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

    	System.out.println("Loading user by username: " + username);

    	   try {
    		   Optional <UserM> user = userRepository.findByEmail(username);
    		//   Optional <UserM> userUsername= userRepository.findByUsername(email);
			  if (user.isEmpty()) {
		            throw new UsernameNotFoundException("User not found with username: " + username);
		        }
			return user.get();
		}
    	   catch (IncorrectResultSizeDataAccessException e) {
               throw new UsernameNotFoundException("Multiple users found with username: " + username);
           }
    	   catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;

    }

    public boolean emailExists(String email) {
        return userRepository.existsByEmail(email);
    }

    public List<UserM> getAllUsers() {
        return userRepository.findAll();
    }

    public UserM getUserById(String userId) {
    	return userRepository.findById(userId).orElse(null);
    }

    public UserM createUser(UserM user) {
        return userRepository.save(user);
    }

    public UserM updateUser(String userId, UserM user) {
       UserM existingUser = getUserById(userId);
       if (existingUser != null) {
        existingUser.setUsername(user.getUsername());
        existingUser.setRuolo(user.getRuolo());
        existingUser.setPassword(user.getPassword());
        existingUser.setEmail(user.getEmail());
        return userRepository.save(existingUser);
       } else {
    	   throw new NoSuchElementException("Utente non trovato con ID: " + userId);
       }
    }

    public void deleteUser(String userId) {
        userRepository.deleteById(userId);
    }

    public List<UserM> getUsersByRole(String ruolo) {
        return userRepository.findByRuolo(ruolo);
    }
}
